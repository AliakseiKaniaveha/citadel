/*
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    //Apply the application plugin to build and distribute Java app
    id 'application'

    //Spring Boot
    //doesn't applied to all configurations as we need it for implementation only
    id 'org.springframework.boot' version '2.6.4' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    //Ide IDE perks for Gradle
    id 'idea'
}

dependencyManagement {
    implementation {
        imports {
            //the org.springframework.boot BOM
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


sourceSets {
    /*main {
        //application sources
        //it's default for gradle so no need to define explicitly
        java {
            srcDirs = ['src/main/java']
        }
    }*/
    /*test {
        //main's unit tests
        //it's default for gradle so no need to define explicitly
        java {
            srcDirs = ['src/test/java']
        }
    }*/
    integratedUnitTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDirs = ['src/test-integrated-unit/java']
        }
        resources {
            srcDirs = ['src/test-integrated-unit/resources']
        }
    }
    systemTest {
        java {
            srcDirs = ['src/test-system/java']
        }
    }
    uiWebTest {
        java {
            srcDirs = ['src/test-ui-web/java']
        }
    }
}

configurations {
    integratedUnitTestImplementation.extendsFrom testImplementation
    integratedUnitTestRuntimeOnly.extendsFrom runtimeOnly
}

idea {
    module {
        //testSourceDirs += sourceSets.test.java.srcDirs - unit tests are defined by default
        testSourceDirs += sourceSets.integratedUnitTest.java.srcDirs
        testResourceDirs += sourceSets.integratedUnitTest.resources.srcDirs
        testSourceDirs += sourceSets.systemTest.java.srcDirs
        testSourceDirs += sourceSets.uiWebTest.java.srcDirs
    }
}

dependencies {


    /*******************************************************************************************************************
     *                                                Application                                                      *
     ******************************************************************************************************************/
    //Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //Graphviz
    implementation 'guru.nidi:graphviz-java:0.18.1'
    //Byte Code Engineering
    implementation 'org.apache.maven.shared:maven-dependency-analyzer:1.12.0'
    implementation 'org.apache.bcel:bcel:6.5.0'
    //Zip/Unzip
    implementation 'net.lingala.zip4j:zip4j:2.9.1'
    /******************************************************************************************************************/


    /*******************************************************************************************************************
     *                                                Unit Tests                                                       *
     ******************************************************************************************************************/
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'  //junit5
    testImplementation 'org.mockito:mockito-core:4.3.1'  //powerful mocking
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'  //mockito for junit5
    testImplementation 'org.hamcrest:hamcrest:2.2'  //powerful assertions
    /******************************************************************************************************************/


    /*******************************************************************************************************************
     *                                                Integration Tests                                                *
     ******************************************************************************************************************/
    integratedUnitTestImplementation 'org.springframework.boot:spring-boot-starter-test'  //Spring Context in tests
    /******************************************************************************************************************/


    /*******************************************************************************************************************
     *                                                System Tests                                                     *
     ******************************************************************************************************************/
    //tbd
    /******************************************************************************************************************/


    /*******************************************************************************************************************
     *                                                System Web UI Test                                               *
     ******************************************************************************************************************/
    uiWebTestImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'    //junit5
    uiWebTestImplementation 'com.codeborne:selenide:6.3.4'    //Selenide
    /******************************************************************************************************************/
}

application {
    // Define the main class for the application.
    mainClass = 'kaniaveha.aliaksei.citadel.App'
}

def execDocker(String arguments) {
    exec {
        executable 'docker'
        args arguments.split(' ')
    }
}

task buildImage {
    dependsOn build
    doLast {
        execDocker('build -f containers/citadel-app.dockerfile -t citadel-app .')
    }
}

task runInContainer {
    dependsOn buildImage
    doLast {
        execDocker('run -d -p 8080:8080 citadel-app')
    }
}

task runInContainerDebug {
    dependsOn buildImage
    doLast {
        execDocker("run -d -p 8080:8080 -p 5050:5050 -e CITADEL_OPTS='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5050' citadel-app")
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task integratedUnitTest(type: Test) {
    description = 'Runs integratied units tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integratedUnitTest.output.classesDirs
    classpath = sourceSets.integratedUnitTest.runtimeClasspath

    useJUnitPlatform()
}

task uiWebTest(type: Test) {
    description = 'Runs UI tests.'
    group = 'verification'

    testClassesDirs = sourceSets.uiWebTest.output.classesDirs
    classpath = sourceSets.uiWebTest.runtimeClasspath

    useJUnitPlatform()

    //propagate system properties so args of the form -D<key>=<val> can be used in tests
    systemProperties(System.getProperties())
}

task runAllTests {
    dependsOn test, integratedUnitTest, uiWebTest
}